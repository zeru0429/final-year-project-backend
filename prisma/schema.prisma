// Define generator and datasource
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
//define enums

enum UserRole{
  MOTHER
  MANAGER
  RECEPTION
  HEALTH_PROFETIONAL
}

enum AdminRole {
  SUPER
  ADMIN
}

enum HealthStationType {
   GENERAL_HOSPITAL 
   CLINIC
   HEALTH_CENTER
   SPECIALTY_HOSPITAL
   REHABILITATION_CENTER
   DIAGNOSTIC_CENTER
   MATERNITY_HOSPITAL
   PSYCHIATRIC_HOSPITAL
   MEDICAL_LABORATORY 
   PHARMACY
   PEDIATRIC_CLINIC
   SPORTS_MEDICINE_CLINIC
   CHIROPRACTIC_CLINIC 
   VETERINARY_CLINIC 
}

enum gender{
  MALE
  FEMALE
}



// Define model for administrators
model Admins {
  id Int @id @default(autoincrement())
  email String @unique
  phone String @unique
  role AdminRole @default(ADMIN)
  password String
  activeStatus Boolean @default(true)
  createdAt DateTime @default(now())
  otp String?
  otpCreatedAt DateTime? @default(now())
  otpExpiry DateTime? @default(now())
  // References
  profile AdminProfiles?
  healthStation HealthStations[]
  newsPost News[]
  vaccines Vaccines[]

  @@map("admins")
}

// Define model for administrator profiles
model AdminProfiles {
  id Int @id @default(autoincrement())
  adminId Int @unique
  firstName String
  middleName String
  lastName String
  imageUrl String? 
  // References
  admin Admins @relation(fields: [adminId], references:[id],onDelete: Cascade)

  @@map("adminProfiles")
}

// Define model for health stations
model HealthStations {
  id Int @id @default(autoincrement())
  registeredBy Int?
  name String 
  email String @unique
  type String
  city String
  subcity String
  kebele String
  houseNumber String
  createdAt DateTime @default(now())
  imageUrl  String
  // Ref
  info HealthStationInfos[]
  users Users[]
  appointment  Appointments[]
  childVaccine ChildrenVaccines[]
  motherVaccine MotherVaccines[]
  certification Certifications[]
  // Reference
  admin Admins? @relation(fields: [registeredBy], references:[id],onDelete: SetNull)

  @@map("healthStations")
}

// Define model for health station information
model HealthStationInfos {
  id Int @id @default(autoincrement())
  healthStationId Int
  serviceAm String
  serviceOr String
  descriptionAm String 
  descriptionOr String 
  createdAt DateTime @default(now())
  //reference
  iamges  HealthStationsImage[]
  // Reference
  healthStation HealthStations @relation(fields: [healthStationId], references:[id],onDelete: Cascade)

  @@map("healthStationInfos")
}
model HealthStationsImage{
    id Int @id @default(autoincrement())
     healthStationInfoId Int
     imageUrl String
    //reference
    hsInfo  HealthStationInfos @relation(fields: [healthStationInfoId], references:[id])
    @@map("healthstationsImage")
}

// Define model for news posts
model News {
  id Int @id @default(autoincrement())
  writerId Int?
  titleAm String 
  titleOr String 
  descriptionAm String 
  descriptionOr String 
  createdAt DateTime @default(now())
  //ref
  images NewsImage[]
  // Reference
  writer Admins? @relation(fields: [writerId], references:[id],onDelete: SetNull)
  @@map("news")
}
//define news image
model NewsImage{
  id Int @id @default(autoincrement())
  newsId Int
  imageUrl String 
   //reference 
  news News @relation(fields:[newsId], references:[id],onDelete: Cascade)
}


// Define model for vaccines
model Vaccines {
  id Int @id @default(autoincrement())
  registeredBy Int?
  name String
  category String
  dose Int
  duration Int
  description String 
  ageRange String
  createdAt DateTime @default(now())
  //ref
  motherVaccine MotherVaccines[]
  childVaccine ChildrenVaccines[]
  appointment  Appointments[]
  // Reference
  registrar Admins? @relation(fields: [registeredBy], references:[id],onDelete: SetNull)
  @@map("vaccines")
}

// Define model for users
model Users {
  id Int @id @default(autoincrement())
  healthStationId Int?
  email String @unique
  phone String @unique
  role UserRole @default(MOTHER)
  password String
  activeStatus Boolean @default(true)
  createdAt DateTime @default(now())
  otp String?
  otpCreatedAt DateTime? @default(now())
  otpExpiry DateTime? @default(now())
  // Ref
  profile UserProfiles?
  proProfile ProfessionalProfiles?
  motherProfile MothersProfile?
  child  Childrens[]
  appointment  Appointments[]
  certifications  Certifications[]
  childVaccine  ChildrenVaccines[]
  motherVaccine MotherVaccines[]
  notification Notification[]
  report Report[]
  participantInChats Chats[] @relation("ParticipantInChats")
  adminOfChats Chats[] @relation("AdminOfChats")
  sentMessages Messages[] @relation("SentMessages")


  // Reference
  healthStation HealthStations? @relation(fields: [healthStationId], references:[id],onDelete: SetNull)

  @@map("users")
}

// Define model for user profiles
model UserProfiles {
  id Int @id @default(autoincrement())
  userId Int @unique
  firstName String
  middleName String
  lastName String
  sex gender
  imageUrl String? 
  // Reference
  user Users @relation(fields: [userId], references:[id],onDelete: Cascade)
  @@map("userProfiles")
}

// Define model for professional profiles
model ProfessionalProfiles {
  id Int @id @default(autoincrement())
  userId Int @unique
  healthStationId Int
  title String
  position String
  // Reference
  user Users @relation(fields: [userId], references:[id],onDelete: Cascade)

  @@map("professionalProfiles")
}

// Define model for mother's profiles
model MothersProfile {
  id Int @id @default(autoincrement())
  userId Int @unique
  birthdate DateTime
  bloodType String
  RH String
  // Ref
  child Childrens[]
  vaccine MotherVaccines[]
  appointment  Appointments[]
  // Reference
  user Users @relation(fields: [userId], references:[id],onDelete: Cascade)
  @@map("mothersProfiles")
}

// Define model for children
model Childrens {
  id Int @id @default(autoincrement())
  motherId Int?
  registeredBy Int?
  firstName String
  middleName String
  lastName String
  birthdate DateTime
  bloodType String
  isVaccineCompleted Boolean @default(false)
  createdAt DateTime
  //Ref
   certificate Certifications?
   appointment  Appointments[]
   vaccine ChildrenVaccines[]
  // Reference
  mother MothersProfile? @relation(fields: [motherId], references:[id],onDelete: SetNull)
  registrar Users? @relation(fields: [registeredBy], references:[id],onDelete: SetNull)
  @@map("childrens")
}

// Define model for motherVaccine 
model MotherVaccines {
  id Int @id @default(autoincrement())
  motherId Int
  vaccineId Int?
  healthStationId Int?
  registerdBy Int?
  createdDateTime DateTime
  isGiven Boolean
  //reference
   motherProfile MothersProfile @relation(fields: [motherId], references:[userId],onDelete: Cascade)
  vaccine Vaccines? @relation(fields: [vaccineId], references:[id],onDelete: SetNull)
  healthStation HealthStations? @relation(fields: [healthStationId],references: [id],onDelete: SetNull)
  registrar Users? @relation(fields: [registerdBy], references:[id],onDelete: SetNull)
  @@map("motherVaccines")

}

// Define model for childrenVaccine 
model ChildrenVaccines {
  id Int @id @default(autoincrement())
  childId Int
  vaccineId Int?
  healthStationId Int?
  registerdBy Int?
  createdDateTime DateTime
  isGiven Boolean
  //Reference
  child Childrens @relation(fields: [childId], references:[id],onDelete: Cascade)
  vaccine Vaccines? @relation(fields: [vaccineId], references:[id],onDelete: SetNull)
  healthStation HealthStations? @relation(fields: [healthStationId],references: [id],onDelete: SetNull)
  registrar Users? @relation(fields: [registerdBy], references:[id],onDelete: SetNull)
  @@map("childrenVaccines")

}

model Certifications {
  id Int @id @default(autoincrement())
  childId Int @unique
  registerdBy Int?
  healthStationId Int?
  name String
  issuedDate DateTime
  fileUrl String
  //reference
  child Childrens @relation(fields:[childId], references:[id],onDelete: Cascade)
  registrar Users? @relation(fields: [registerdBy], references:[id],onDelete: SetNull)
  healthStation HealthStations? @relation(fields: [healthStationId],references: [id],onDelete: SetNull)
  @@map("certification")
}

model Appointments {
    id Int @id @default(autoincrement())
    motherId Int 
    childId Int
    healthStationId Int?
    registerdBy Int?
    vaccineId Int?
    createdDateTime DateTime
    appointmentDate DateTime
    description String 
    //reference
    registrar Users? @relation(fields: [registerdBy], references:[id],onDelete: SetNull)
    vaccine Vaccines? @relation(fields: [vaccineId], references:[id],onDelete: SetNull)
    station HealthStations? @relation(fields: [healthStationId], references:[id],onDelete: SetNull)
    mother MothersProfile @relation(fields: [motherId], references:[id],onDelete: Cascade)
    child Childrens @relation(fields: [childId], references:[id],onDelete: Cascade)
    @@map("appointments")
}

// Define model for chat
model Chats {
  id Int @id @default(autoincrement())
  name String
  isGroupChat Boolean
  lastMessageI Int  @default(0)
  createdAt DateTime @default(now())
  // Reference to admin
  adminId Int?
  admin Users? @relation("AdminOfChats", fields: [adminId], references: [id], onDelete: Cascade) 
  // Define participants as a many-to-many relation with Users
  participants Users[] @relation("ParticipantInChats")
  messages Messages[]
  
  @@map("chats")
}

// Define model for messages
model Messages {
  id Int @id @default(autoincrement())
  senderId Int
  content String
  sentTime DateTime
  chatId Int
  seen Boolean @default(false)
  // Reference to sender user
  sender Users @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  // Reference to chat
  chat Chats @relation(fields: [chatId], references: [id], onDelete: Cascade)
  // Define attachments as an array of MessageAttachments
  attachments MessageAttachment[]
  @@map("messages")
}


// Define model for message attachments
model MessageAttachment {
  id Int @id @default(autoincrement())
  url String
  // Reference to the message
  message Messages @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int
  @@map("messageAttachments")
}



model Notification {
  id Int @id @default(autoincrement())
  userId Int
  message String
  createdAt DateTime @default(now())
  seen Boolean @default(false)
  user Users @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model Report {
  id Int @id @default(autoincrement())
  userId Int
  message String
  seen Boolean @default(false)
  createdAt DateTime @default(now())
  user Users @relation(fields: [userId],references: [id],onDelete: Cascade)
}
